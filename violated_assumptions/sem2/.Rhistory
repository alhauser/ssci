citation("bnlearn")
library(bnlearn)
data("learning.test")
pairs(learning.test)
source('~/Documents/master_thesis_manuel/exercises/sem1.R')
gs(data)
bn.gs = gs(data)
bn.gs
bn.gs = gs(data)
bn.iamb = iamb(data)
bn.fast.iamb = fast.iamb(data)
bn.inter.iamb = inter.iamb(data)
bn.hc = hc(data)
bn.hc
compare(bn.gs, bn.iamb)
compare(bn.hc, bn.gs)
?compare()
all.equal(bn.gs, bn.iamb)
all.equal(bn.gs, bn.fast.iamb)
all.equal(bn.gs, bn.inter.iamb)
all.equal(bn.gs, bn.hc)
plot(bn.gs)
plot(bn.hc)
graphviz.plot(bn.gs)
library(Rgraphviz)
install.packages(Rgraphviz)
biocLite(Rgraphviz)
source("https://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
pra(mfrow = c(1,2))
plot(bn.gs, main = "constrain based")
par(mfrow = c(1,2))
plot(bn.gs, main = "constrain based")
plot(bn.hc, main = "hill climbing")
library(Rgraphviz)
graphviz.plot(bn.gs)
graphviz.plot(bn.hc)
plot(bn.hc, main = "hill climbing")
library(pcalg)
pc = pc(data)
library(pcalg)
pc = pc(data)
?pc
data(gmG)
gmG
str(gmG)
gmG$x
str(gmG$x)
str(data)
cor(data)
cor(gmG$x)
suffStats = list(C = cor(data), n = nrow(data))
suffStats
pc = pc(suffStat, indepTest = gaussCItest, p = ncol(data), alpha = 0.01)
suffStat = list(C = cor(data), n = nrow(data))
pc = pc(suffStat, indepTest = gaussCItest, p = ncol(data), alpha = 0.01)
pc
plot(pc)
dev.off()
toLatex(sessionInfo())
,matrix(1,1,1)
matrix(1,1,1)
score = new("GausLOpenObsScore", data = matrix(1,1,1), lambda = 0.5*log(nrow(data)))
score = new("GaussLOpenObsScore", data = matrix(1,1,1), lambda = 0.5*log(nrow(data)))
library(pcalg)
score = new("GaussLOpenObsScore", data = matrix(1,1,1), lambda = 0.5*log(nrow(data)))
GaussLOpenObsScore
score = new("GaussLOpenObsScore", data = matrix(1,1,1), lambda = 0.5*log(nrow(data)), intecept = F, use.cpp = T)
score = new("GaussLOpenObsScore", data = data)
score = new(GaussLOpenObsScore, data = data)
score = new("GaussLOpenIntScore", data = data)
score = new("GaussLOpenObsScore", data)
version(pcalg)
R.version
?pcalg
?pc
score = new("GaussL0penObsScore", data)
score = new("GaussL0penObsScore", as.matrix(data))
score = new("GaussL0penObsScore", as.matrix(data))
ges.fit = ges(ncol(data), score)
ges.fit
plot(gges.fit)
plot(ges.fit)
plot(ges.fit$essgraph)
fci.fit = fci(suffStat, indepTest = gaussCItest, p = ncol(data), alpha = 0.01 )
plot(fci.fit)
rfci.fit = rfci(suffStat, indepTest = gaussCItest, p = ncol(data), alpha = 0.01 )
plot(rfci.fit)
plot(fci.fit)
data(gmInt)
gmint$x
gmInt$x
gmInt$targets
gmInt$target.index
plot(bn.hc, main = "hill climbing")
bn.gs = gs(data)
bn.iamb = iamb(data)
bn.fast.iamb = fast.iamb(data)
bn.inter.iamb = inter.iamb(data)
bn.hc = hc(data)
all.equal(bn.gs, bn.iamb)
all.equal(bn.gs, bn.fast.iamb)
all.equal(bn.gs, bn.inter.iamb)
#all true the graph of all is the same..
all.equal(bn.gs, bn.hc)
par(mfrow = c(1,2))
plot(bn.gs, main = "constrain based")
bn.hc = hc(data)
library(bnlearn)
bn.gs = gs(data)
bn.iamb = iamb(data)
bn.fast.iamb = fast.iamb(data)
bn.inter.iamb = inter.iamb(data)
bn.hc = hc(data)
all.equal(bn.gs, bn.iamb)
all.equal(bn.gs, bn.fast.iamb)
all.equal(bn.gs, bn.inter.iamb)
#all true the graph of all is the same..
all.equal(bn.gs, bn.hc)
#hc is different
# vizualistation of the graphs
par(mfrow = c(1,2))
plot(bn.gs, main = "constrain based")
plot(bn.hc, main = "hill climbing")
plot(ges.fit)
plot(ges.fit$essgraph)
mean(data$X2)
pairs(int2)
int2 = data.frame(X1 = numeric(size), X2 = numeric(size), X3 = numeric(size), X4 = numeric(size), X5 = numeric(size))
int2$X1 = rnorm(size, 0, sdev[1])
int2$X2 = 1
int2$X3 = 0.6 * data$X2 + rnorm(size, 0, sdev[3])
int2$X4 = 0.14 * data$X2 + 0.6 * data$X3 + rnorm(size, 0, sdev[4])
int2$X5 = -0.5 * data$X1 + -0.7 * data$X3 + 0.9 * data$X4 + rnorm(size, 0, sdev[4])
pairs(int2)
int2$X1 = rnorm(size, 0, sdev[1])
int2$X2 = 1 + rnorm(size, 0, 0.0001)
int2$X3 = 0.6 * data$X2 + rnorm(size, 0, sdev[3])
int2$X4 = 0.14 * data$X2 + 0.6 * data$X3 + rnorm(size, 0, sdev[4])
int2$X5 = -0.5 * data$X1 + -0.7 * data$X3 + 0.9 * data$X4 + rnorm(size, 0, sdev[4])
pairs(int2)
int3$X1 = rnorm(size, 0, sdev[1])
int3 = data.frame(X1 = numeric(size), X2 = numeric(size), X3 = numeric(size), X4 = numeric(size), X5 = numeric(size))
int3$X1 = rnorm(size, 0, sdev[1])
int3$X2 = 0.3 * data$X1 + rnorm(size, 0, sdev[2])
int3$X3 = 1 + rnorm(size, 0, 0.0001)
int3$X4 = 0.14 * data$X2 + 0.6 * data$X3 + rnorm(size, 0, sdev[4])
int3$X5 = -0.5 * data$X1 + -0.7 * data$X3 + 0.9 * data$X4 + rnorm(size, 0, sdev[4])
pairs(int3)
intdata = rbind(data, int2, int3)
gmInt$targets
gmInt$target.index
targets = list(0, 2,3)
targets
target.index = c(rep(1,size), rep(2, size), rep(3,size))
target.index
int.data = rbind(data, int2, int3)
int.data = rbind(data, int2, int3)
#----------------------------------------------------------------------------
# learning with gies
#----------------------------------------------------------------------------
int.targets = list(0, 2, 3)
int.target.index = c(rep(1,size), rep(2, size), rep(3,size))
int.score = new("Gauss0penIntScore", data = int.data, targets = int.targets, int.target.index = int.target.index)
int.score = new("GaussL0penIntScore", data = int.data, targets = int.targets, int.target.index = int.target.index)
int.target.index
gmInt$target.index
int.score = new("GaussL0penIntScore", int.data, targets = int.targets, int.target.index = int.target.index)
str(gmInt$target.index)
str(int.target.index)
len(data)
nrow(data)
nrow(int.data)
nrow(gmInt$x)
int.score = new("GaussL0penIntScore", int.data, targets = int.targets, target.index = int.target.index)
int.score = new("GaussL0penIntScore", as.matrix(int.data), targets = int.targets, target.index = int.target.index)
gies.fit = gies(ncol(int.data, int.targets, int.score))
gies.fit = gies(ncol(int.data), int.targets, int.score))
gies.fit = gies(ncol(int.data), int.targets, int.score)
plot(gies.fit$essgraph)
gies.fit
plot(gies.fit$essgraph)
int.targets = list(int(0), 2, 3)
int.targets = list(integer(0), 2, 3)
int.targets
gmInt$targets
int.targets = list(integer(0), 2, 3)
int.target.index = c(rep(1,size), rep(2, size), rep(3,size))
int.score = new("GaussL0penIntScore", as.matrix(int.data), targets = int.targets, target.index = int.target.index)
gies.fit = gies(ncol(int.data), int.targets, int.score)
plot(gies.fit$essgraph)
plot(int.data)
plot(int.data$X2)
dev.off()
plot(int.data$X2)
plot(int.data$X3)
plot(int.target.index)
plot(gies.fit$essgraph)
int2 = data.frame(X1 = numeric(size), X2 = numeric(size), X3 = numeric(size), X4 = numeric(size), X5 = numeric(size))
int2$X1 = rnorm(size, 0, sdev[1])
int2$X2 = 1 + rnorm(size, 0)
int2$X3 = 0.6 * data$X2 + rnorm(size, 0, sdev[3])
int2$X4 = 0.14 * data$X2 + 0.6 * data$X3 + rnorm(size, 0, sdev[4])
int2$X5 = -0.5 * data$X1 + -0.7 * data$X3 + 0.9 * data$X4 + rnorm(size, 0, sdev[4])
pairs(int2)
int3 = data.frame(X1 = numeric(size), X2 = numeric(size), X3 = numeric(size), X4 = numeric(size), X5 = numeric(size))
int3$X1 = rnorm(size, 0, sdev[1])
int3$X2 = 0.3 * data$X1 + rnorm(size, 0, sdev[2])
int3$X3 = 1 + rnorm(size, 0)
int3$X4 = 0.14 * data$X2 + 0.6 * data$X3 + rnorm(size, 0, sdev[4])
int3$X5 = -0.5 * data$X1 + -0.7 * data$X3 + 0.9 * data$X4 + rnorm(size, 0, sdev[4])
pairs(int3)
int.data = rbind(data, int2, int3)
#----------------------------------------------------------------------------
# learning with gies
#----------------------------------------------------------------------------
int.targets = list(integer(0), 2, 3)
int.target.index = c(rep(1,size), rep(2, size), rep(3,size))
int.score = new("GaussL0penIntScore", as.matrix(int.data), targets = int.targets, target.index = int.target.index)
gies.fit = gies(ncol(int.data), int.targets, int.score)
plot(gies.fit$essgraph)
source('~/Documents/master_thesis_manuel/exercises/sem1.R')
dev.off()
source('~/Documents/master_thesis_manuel/exercises/sem1.R')
plot(rfci.fit)
plot(fci.fit)
plot(ges.fit$essgraph)
plot(pc.fit)
plot(gies.fit$essgraph)
source('~/Documents/master_thesis_manuel/exercises/sem1.R')
plot(gies.fit$essgraph)
plot(rfci.fit)
plot(fci.fit)
plot(ges.fit$essgraph)
gies.fit = gies(ncol(int.data), int.targets, int.score)
plot(gies.fit$essgraph)
warnings()
source('~/Documents/master_thesis_manuel/exercises/sem1.R')
source('~/Documents/master_thesis_manuel/exercises/sem1.R', echo=TRUE)
source('~/Documents/master_thesis_manuel/exercises/sem1.R')
library(bnlearn)
library(pcalg)
getwd()
getwd()
getwed()
getwd()
install.packages("MASS")
getwd()
library(pcalg)
source("../../test_utils.R")
source("../sid_samplesize.R")
set.seed(6)
plot.true.estimated.density("gies", "../est_data_nnodes_11_gies_nintervent_7.csv", 11, corr = F)
source("plot_from_txt.R")
setwd("Documents/master_thesis_manuel/sid/sem6")
source("../../test_utils.R")
source("../sid_samplesize.R")
set.seed(42)#setting the same seed will result in very simmilar structures in the SEM
sem = get.random.sem2(12, 0.3, c(0.3,3), c(0.1,1.2)) # small but dense
mmat = sem[[1]]
sdev = sem[[2]]
write.table(mmat, "mmat.txt",row.names = F, col.names = F)
write.table(sdev, "sdev.txt", row.names = F, col.names = F)
true.am= t(sem[[1]])#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]), sep = "")
# named X1, X2, ..., Xn
g = graph.adjacency(true.am)
pdf("graph.pdf")
plot(g)
dev.off()
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = rep(1:obs, rep(size, obs))
}
size = seq(50, 4000, 10)
targets = c(3,5,6,10)
tar.values = c(1,1,1,1)
int.targets = list(integer(0), 3, 5, 6, 10)
int.size = round(size/(length(targets) +1))
int.index = lapply(int.size, get.int.index, targets)
source("interactions.R")
mmat
source("interactions.R")
source("interactions.R")
