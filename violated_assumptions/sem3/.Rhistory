getwd()
source("test_utils.R")
mmat = matrix(c(0,0,0,0,0,0,0,
0,0,0,0,0,0,0,
0,1.3,0,0,0,0,0,
0,0,0.9,0,0,0,0,
1.5,0,-0.7,0,0,0,0,
0,0,0,-0.4,1.2,0,0,
0.8,0,0,-0.6,0,1.1,0),
nrows = 7, byrow = T)
mmat = matrix(c(0,0,0,0,0,0,0,
0,0,0,0,0,0,0,
0,1.3,0,0,0,0,0,
0,0,0.9,0,0,0,0,
1.5,0,-0.7,0,0,0,0,
0,0,0,-0.4,1.2,0,0,
0.8,0,0,-0.6,0,1.1,0),
nrow = 7, byrow = T)
mmmat
mmat
sdev = c(1.5, 1.9, 0.8, 1.1, 0.9, 0.5, 0.6)
pairs(get.lin.gaus(mmat, sdev, 2000))
size = seq(10, 2000, 2)
set.seed(6)
dat.list = lapply(size, FUN = get.lin.gaus, mmat = mmat, sdev = sdev)
plot.sid(dat.list, size, hc, "hc", mmat)
source("sid_samplesize.R")
plot.sid(dat.list, size, hc, "hc", mmat)
source("test_utils.R")
source("sid_samplesize.R")
plot.sid(dat.list, size, hc, "hc", mmat)
size = head(size)
size
dat.list = lapply(size, FUN = get.lin.gaus, mmat = mmat, sdev = sdev)
plot.sid(dat.list, size, hc, "hc", mmat)
plot.sid(dat.list, size, gs, "gs", mmat)
plot.sid(dat.list, size, pc, "pc", mmat)
plot.sid(dat.list, size, fci, "fci", mmat)
plot.sid(dat.list, size, ges, "ges", mmat)
plot.sid(dat.list, size, iamb, "iamb", mmat)
plot.sid(dat.list, size, hc, "hc", mmat)
plot.sid(dat.list, size, gs, "gs", mmat) $
)
plot.sid(dat.list, size, gs, "gs", mmat)
plot.sid(dat.list, size, pc, "pc", mmat)
plot.sid(dat.list, size, ges, "ges", mmat)
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", mmat, size)
get.int.data = function(mmat, targets, tar.values, sdev, size){
data = get.lin.gaus(mmat, sdev, size)
for( i in seq(length(targets))){
int = get.int.lin.gaus(mmat, targets[i], tar.values[i], sdev, size)
data = rbind(data, int)
}
return(data)
}
get.int.index = function(size, targets){
int.target.index = (rep(c(1, targets), rep(size, length(targets)+1)))
}
int.data = lapply(size, get.int.data, targets = targets, tar.values = tar.values, mmat = mmat, sdev = sdev)
int.index = lapply(size, get.int.index, targets)
targets = c(4,5)
tar.values = c(1,1)
int.targets = list(integer(0), 4,5)
get.int.data = function(mmat, targets, tar.values, sdev, size){
data = get.lin.gaus(mmat, sdev, size)
for( i in seq(length(targets))){
int = get.int.lin.gaus(mmat, targets[i], tar.values[i], sdev, size)
data = rbind(data, int)
}
return(data)
}
get.int.index = function(size, targets){
int.target.index = (rep(c(1, targets), rep(size, length(targets)+1)))
}
# targets = c(2,3)
# tar.values = c(1,1)
# int.targets = list(integer(0), 2,3)
int.data = lapply(size, get.int.data, targets = targets, tar.values = tar.values, mmat = mmat, sdev = sdev)
int.index = lapply(size, get.int.index, targets)
pdf("sid_lin_gauss.pdf")
dev.off()
dev.off()
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", mmat, size)
int.data
size
int.index
int.targets
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", mmat, size)
size
data
int.data
size
?gies
data("gmInt)
""
)
"
data("gmInt")
gmInt
gmInt$x
str(gmInt$x)
gmInt$targets
gmInt$target.index
int.data
int.index[[6]]
length(int.index[[6]])
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", mmat, size)
new("GaussL0penIntScore", as.matrix(int.data[[1]], int.targets, int.index))
source("sid_samplesize.R")
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", true.am, size)
int.data
int.index
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", true.am, size)
source("sid_samplesize.R")
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", true.am, size)
int.targets = list(integer(0), 2,3)
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", true.am, size)
int.targets = list(integer(0), 2,3)
int.targets
get.int.index = function(size, targets){
int.target.index = (rep(c(1, 2:length(targets)), rep(size, length(targets)+1)))
}
int.index = lapply(size, get.int.index, targets)
rep(c(1, 2:length(targets))
)
targets
length(targets)
rep(c(1, 2:length(targets)+1))
rep(c(1, 2:(length(targets)+1)))
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = (rep(c(1, 2:obs), rep(size, obs))
}
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = (rep((1:obs), rep(size, obs))
}
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = (rep((1:obs, rep(size, obs))
}
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = (rep(1:obs, rep(size, obs))
}
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = rep(1:obs, rep(size, obs))
}
int.index = lapply(size, get.int.index, targets)
int.index
size = seq(10, 20, 2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
dev.off()
size
size = seq(10, 20, 2)
size
source('~/.active-rstudio-document')
plot.sid(dat.list, size, hc, "hc", true.am)
dev.off()
plot.sid(dat.list, size, hc, "hc", true.am)
plot.sid(dat.list, size, gs, "gs", true.am)
plot.sid(dat.list, size, iamb, "iamb", true.am)
plot.sid(dat.list, size, pc, "pc", true.am)
plot.sid(dat.list, size, ges, "ges", true.am)
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", true.am, size)
size = seq(10, 200, 2)
plot.sid(dat.list, size, hc, "hc", true.am)
set.seed(6)
dat.list = lapply(size, FUN = get.lin.gaus, mmat = mmat, sdev = sdev)
get.int.data = function(mmat, targets, tar.values, sdev, size){
data = get.lin.gaus(mmat, sdev, size)
for( i in seq(length(targets))){
int = get.int.lin.gaus(mmat, targets[i], tar.values[i], sdev, size)
data = rbind(data, int)
}
return(data)
}
int.data = lapply(size, get.int.data, targets = targets, tar.values = tar.values, mmat = mmat, sdev = sdev)
targets = c(4,5)
tar.values = c(1,1)
int.targets = list(integer(0), 4,5)
int.index = lapply(size, get.int.index, targets)
plot.sid(dat.list, size, hc, "hc", true.am)
plot.sid(dat.list, size, gs, "gs", true.am)
plot.sid(dat.list, size, iamb, "iamb", true.am)
plot.sid(dat.list, size, pc, "pc", true.am)
plot.sid(dat.list, size, ges, "ges", true.am)
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", true.am, size)
source("sid_samplesize.R")
plot.sid(dat.list, size, hc, "hc", true.am)
plot.sid(dat.list, size, gs, "gs", true.am)
source("sid_samplesize.R")
plot.sid(dat.list, size, hc, "hc", true.am)
plot.sid(dat.list, size, gs, "gs", true.am)
plot.sid(dat.list, size, iamb, "iamb", true.am)
source('~/Documents/master_thesis_manuel/exercises/sem2/sid_samplesize.R')
plot.sid(dat.list, size, hc, "hc", true.am)
plot.sid(dat.list, size, gs, "gs", true.am)
source('~/Documents/master_thesis_manuel/exercises/sem2/sid_samplesize.R')
plot.sid(dat.list, size, iamb, "iamb", true.am)
source('~/Documents/master_thesis_manuel/exercises/sem2/sid_samplesize.R')
plot.sid(dat.list, size, pc, "pc", true.am)
plot.sid(dat.list, size, ges, "ges", true.am)
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", true.am, size)
warnings()
size
source('~/Documents/master_thesis_manuel/exercises/sem2/sem2.R')
source('~/Documents/master_thesis_manuel/exercises/sem2/sem2.R')
source('~/Documents/master_thesis_manuel/exercises/sem2/sem2.R')
size = seq(1990, 2000, 2)
set.seed(6)
lambda = 1/sdev # this results error terms with the same variatoin as with a normal distr
dat.list = lapply(size, FUN = get.lin.exp, mmat = mmat, lambda = lambda)
get.int.data = function(mmat, targets, tar.values, sdev, size){
data = get.lin.exp(mmat, lambda, size)
for( i in seq(length(targets))){
int = get.int.exp(mmat, targets[i], tar.values[i], lambda, size)
data = rbind(data, int)
}
return(data)
}
plot.sid(dat.list, size, pc, "pc", true.am)
plot.sid(dat.list, size, iamb, "iamb", true.am)
warnings()
plot.sid(dat.list, size, gs, "gs", true.am)
warnings()
plot.sid(dat.list, size, hc, "hc", true.am)
plot.sid(dat.list, size, gs, "gs", true.am)
plot.sid(dat.list, size, pc, "pc", true.am)
plot.sid(dat.list, size, ges, "ges", true.am)
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", true.am, size)
int.data = lapply(size, get.int.data, targets = targets, tar.values = tar.values, mmat = mmat, sdev = sdev)
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", true.am, size)
int.index = lapply(size, get.int.index, targets)
plot.int.sid(int.data, int.index, int.targets, method = gies, method.name = "gies", true.am, size)
size = seq(10, 200, 2)
true.am = t(mmat)#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
# named X1, X2, ..., Xn
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = rep(1:obs, rep(size, obs))
}
targets = c(4,5)
tar.values = c(1,1)
int.targets = list(integer(0), 4,5)
int.index = lapply(size, get.int.index, targets)
source("sid_unif_noise.R")
size
source("sid_exp_noise.R")
true.am
source("sid_samplesize.R")
source("sid_exp_noise.R")
source("sid_exp_noise.R")
source("sid_samplesize.R")
source("sid_exp_noise.R")
mmat
mmat = matrix(c(0,0,0,0,0,0,0,
0,0,0,0,0,0,0,
0,1.3,0,0,0,0,0,
1.5,0,-0.7,0,0,0,0,
0,0,0.9,-0.8,0,0,0,
0,0,0,-0.4,1.2,0,0,
0.8,0,0,-0.6,0,1.1,0),
nrow = 7, byrow = T)
sdev = c(1.5, 1.9, 0.8, 1.1, 0.9, 0.5, 0.6)
size = seq(10, 200, 2)
pdf("distribution.pdf")
pairs(get.lin.gaus(mmat, sdev, 2000))
dev.off()
#---------------------------------------------------------------
# create true adjacency matrix from mmat
#---------------------------------------------------------------
true.am = t(mmat)#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
source("sid_exp_noise.R")
t
source("sid_samplesize.R")
source("sid_exp_noise.R")
source("sid_unif_noise.R")
data
dat.list
dat.list[[6]]
length(dat.list)
d = dat.list[[96]]
iamb(d)
plot(iamb(d))
source('~/Documents/master_thesis_manuel/exercises/sem2/sid_samplesize.R')
source('~/Documents/master_thesis_manuel/exercises/sem2/sem2.R')
source('~/Documents/master_thesis_manuel/exercises/sem2/test_utils.R')
source('~/Documents/master_thesis_manuel/exercises/sem2/sid_non_lin.R')
quad = matrix(c(0,0,0,0,0,0,0,
0,0,0,0,0,0,0,
0,2,0,0,0,0,0,
1,0,1,0,0,0,0,
0,0,2,1,0,0,0,
0,0,0,2,1,0,0,
2,0,0,1,0,1,0),
nrow = 7, byrow = T)
qubic = quad
qubic[which(qubic == 2)] = 3
quad
qubic
dat.list
size
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
source("sid_non_lin.R")
dev.off()
dev.off()
mmat = matrix(c(0,0,0,0,0,0,0,
0,0,0,0,0,0,0,
0,1.3,0,0,0,0,0,
1.5,0,-0.7,0,0,0,0,
0,0,0.9,-0.8,0,0,0,
0,0,0,-0.4,1.2,0,0,
0.8,0,0,-0.6,0,1.1,0),
nrow = 7, byrow = T)
sdev = c(1.5, 1.9, 0.8, 1.1, 0.9, 0.5, 0.6)
size = seq(10, 200, 2)
true.am = t(mmat)#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = rep(1:obs, rep(size, obs))
}
targets = c(4,5)
tar.values = c(1,1)
int.targets = list(integer(0), 4,5)
int.index = lapply(size, get.int.index, targets)
quad = matrix(c(0,0,0,0,0,0,0,
0,0,0,0,0,0,0,
0,2,0,0,0,0,0,
1,0,1,0,0,0,0,
0,0,2,1,0,0,0,
0,0,0,2,1,0,0,
2,0,0,1,0,1,0),
nrow = 7, byrow = T)
qubic = quad
qubic[which(qubic == 2)] = 3
source("sid_non_lin.R")
dev.off()
source('~/Documents/master_thesis_manuel/exercises/sem2/sem2.R')
source('~/Documents/master_thesis_manuel/exercises/sem2/sem2.R')
warnings()
getwd()
mmat = matrix(c(0,0,0,0,0,0,0,
0,0,0,0,0,0,0,
0,1.3,0,0,0,0,0,
1.5,0,-0.7,0,0,0,0,
0,0,0.9,-0.8,0,0,0,
0,0,0,-0.4,1.2,0,0,
0.8,0,0,-0.6,0,1.1,0),
nrow = 7, byrow = T)
true.am = t(mmat)#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
g = graph.adjacency(true.am)
pdf("graph.pdf")
plot(g)
dev.off()
library(igraph)
true.am = t(mmat)#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
g = graph.adjacency(true.am)
pdf("graph.pdf")
plot(g)
dev.off()
source('~/Documents/master_thesis_manuel/introduction_and_sid/sid/sem2/sem2.R')
