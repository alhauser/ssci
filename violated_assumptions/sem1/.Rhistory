plot(g)
source('~/Documents/master_thesis_manuel/test_utils.R', echo=TRUE)
source("../../test_utils.R")
source("../../test_utils.R")
source("../sid_samplesize.R")
set.seed(6)
sem = get.random.sem2(15, 0.2, c(0.2,3), c(0.1,2.5)) # large but sparse graph
mmat = sem[[1]]
sdev = sem[[2]]
pdf("distribution.pdf")
pairs(get.lin.gaus(mmat, sdev, 2000))
dev.off()
#---------------------------------------------------------------
dev.off()
pdf("distribution.pdf")
pairs(get.lin.gaus(mmat, sdev, size = 2000))
dev.off()
pdf("distribution.pdf")
pairs(get.lin.gaus(sem = sem, size = 2000))
dev.off()
true.am= t(sem[[1]])#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
# named X1, X2, ..., Xn
g = graph.adjacency(true.am)
pdf("graph.pdf")
plot(g)
dev.off()
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = rep(1:obs, rep(size, obs))
}
size = seq(50,4000, 10)
targets = c(4,5,10,12,13)
tar.values = c(1,1,1,1,1)
int.targets = list(integer(0), 4, 5, 10, 12, 13)
int.size = round(size/(length(trargets) +1))
int.size = round(size/(length(targets) +1))
int.index = lapply(int.size, get.int.index, targets)
source("../sid_lin_gauss.R")
source("../sid_lin_gauss.R")
size = seq(50,4000, 10)
targets = c(4,5,10,12,13)
tar.values = c(1,1,1,1,1)
int.targets = list(integer(0), 4, 5, 10, 12, 13)
int.size = round(size/(length(targets) +1))
int.index = lapply(int.size, get.int.index, targets)
source("../sid_lin_gauss.R")
dat.list = lapply(size = size, FUN = get.lin.gaus, sem = sem)
dat.list = lapply(size, FUN = get.lin.gaus, mmat = mmat, sdev = sdev, sem = NULL)
source("../sid_lin_gauss.R")
data = get.lin.gaus(mmat = mmat, sdev = sdev, size = size)
source("../sid_lin_gauss.R")
set.seed(8)
sem = get.random.sem2(15, 0.2, c(0.2,3), c(0.1,2.5)) # large but sparse graph
mmat = sem[[1]]
sdev = sem[[2]]
# pdf("distribution.pdf")
# pairs(get.lin.gaus(sem = sem, size = 2000))
# dev.off()
#---------------------------------------------------------------
# create true adjacency matrix from mmat
#---------------------------------------------------------------
true.am= t(sem[[1]])#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
# named X1, X2, ..., Xn
g = graph.adjacency(true.am)
pdf("graph.pdf")
plot(g)
dev.off()
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = rep(1:obs, rep(size, obs))
}
size = seq(50,4000, 10)
targets = c(4,5,10,12,13)
tar.values = c(1,1,1,1,1)
int.targets = list(integer(0), 4, 5, 10, 12, 13)
int.size = round(size/(length(targets) +1))
int.index = lapply(int.size, get.int.index, targets)
source("../sid_lin_gauss.R")
set.seed(8)
sem = get.random.sem2(15, 0.1, c(0.2,3), c(0.1,2.5)) # large but sparse graph
mmat = sem[[1]]
sdev = sem[[2]]
# pdf("distribution.pdf")
# pairs(get.lin.gaus(sem = sem, size = 2000))
# dev.off()
#---------------------------------------------------------------
# create true adjacency matrix from mmat
#---------------------------------------------------------------
true.am= t(sem[[1]])#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
# named X1, X2, ..., Xn
g = graph.adjacency(true.am)
pdf("graph.pdf")
plot(g)
dev.off()
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = rep(1:obs, rep(size, obs))
}
size = seq(50,4000, 10)
targets = c(4,5,10,12,13)
tar.values = c(1,1,1,1,1)
int.targets = list(integer(0), 4, 5, 10, 12, 13)
int.size = round(size/(length(targets) +1))
int.index = lapply(int.size, get.int.index, targets)
source("../sid_lin_gauss.R")
set.seed(6)
sem = get.random.sem2(15, 0.15, c(0.2,3), c(0.1,2.5)) # large but sparse graph
mmat = sem[[1]]
sdev = sem[[2]]
# pdf("distribution.pdf")
# pairs(get.lin.gaus(sem = sem, size = 2000))
# dev.off()
#---------------------------------------------------------------
# create true adjacency matrix from mmat
#---------------------------------------------------------------
true.am= t(sem[[1]])#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
# named X1, X2, ..., Xn
g = graph.adjacency(true.am)
pdf("graph.pdf")
plot(g)
dev.off()
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = rep(1:obs, rep(size, obs))
}
size = seq(50,4000, 10)
targets = c(4,5,10,12,13)
tar.values = c(1,1,1,1,1)
int.targets = list(integer(0), 4, 5, 10, 12, 13)
int.size = round(size/(length(targets) +1))
int.index = lapply(int.size, get.int.index, targets)
source("../sid_lin_gauss.R")
size = seq(50,400, 10)
targets = c(4,5,10,12,13)
tar.values = c(1,1,1,1,1)
int.targets = list(integer(0), 4, 5, 10, 12, 13)
int.size = round(size/(length(targets) +1))
int.index = lapply(int.size, get.int.index, targets)
source("../sid_unif_noise.R")
source("../sid_exp_noise.R")
quad.density = 0.3
quad = t(true.am)
quad[which(quad == 1)] = 1 + rbinom(sum(quad), 1, quad.density)
quad
quad.density = 0.5
quad = t(true.am)
quad[which(quad == 1)] = 1 + rbinom(sum(quad), 1, quad.density)
quad
print(sum(quad ==2))
quad.density = 0.5
quad = t(true.am)
quad[which(quad == 1)] = 1 + rbinom(sum(quad), 1, quad.density)
print(sum(quad ==2))
qubic = quad
qubic[which(qubic == 2)] = 3
source("../sid_non_lin.R")
source("../sid_non_lin.R")
int.data = lapply(int.size, get.int.data, targets = targets, tar.values = tar.values, mmat = mmat, sdev = sdev, pot = qubic)
source("../sid_non_lin.R")
logistic = quad
logistic[which(logistic != 0)] = logistic[which(logistic != 0)]-1
set.seed(6)
l = runif(sum(logistic, 4,16))
k = runif(sum(logistic, 0.5, 4))
neg = rbinom(sum(logistic), 1, 0.5)
k[which(neg == 1)] = -k[which(neg == 1)]
source("../sid_logistic.R")
source("../sid_logistic.R")
source("../../test_utils.R")
source("../sid_non_lin.R")
source("../sid_logistic.R")
source("../sid_logistic.R")
source("../interactions.R")
source("interactions.R")
set.seed(6)
sem = get.random.sem2(15, 0.15, c(0.2,3), c(0.1,1.2)) # large but sparse graph
mmat = sem[[1]]
mmat
set.seed(6)
sem = get.random.sem2(15, 0.15, c(0.2,3), c(0.1,1.2)) # large but sparse graph
mmat = sem[[1]]
mmat
mmat[1,]
mmat[2,]
mmat[3,]
true.am= t(sem[[1]])#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
# named X1, X2, ..., Xn
g = graph.adjacency(true.am)
plot(g)
mmat[4,]
mmat[5,]
mmat[6,]
mmat[7,]
mmat[8,]
mmat[9,]
mmat[10,]
mmat[11,]
mmat[12,]
mmat[13,]
mmat[14,]
mmat[15,]
targets
int.data = lapply(int.size, get.int.data, mmat = mmat, sdev = sdev)
source("interactions.R")
source("interactions.R")
size = seq(50,400, 10)
targets = c(4,10,12,13)
tar.values = c(1,1,1,1)
int.targets = list(integer(0), 4, 10, 12, 13)
int.size = round(size/(length(targets) +1))
int.index = lapply(int.size, get.int.index, targets)
source("interactions.R")
source("interactions.R")
sum(mmat !=0)
18/choose(15,2)
l
k
mmat
sdev
get.int.logis(mmat, logistic, 4,1,l,k,sdev,10)
source("../sid_logistic.R")
set.seed(6)
sem = get.random.sem2(15, 0.15, c(0.2,3), c(0.1,1.2)) # large but sparse graph
mmat = sem[[1]]
sdev = sem[[2]]
# pdf("distribution.pdf")
# pairs(get.lin.gaus(sem = sem, size = 2000))
# dev.off()
#---------------------------------------------------------------
# create true adjacency matrix from mmat
#---------------------------------------------------------------
true.am= t(sem[[1]])#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
g = graph.adjacency(true.am)
plot(g)
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = rep(1:obs, rep(size, obs))
}
size = seq(50,4000, 10)
targets = c(4,10,12,13)
tar.values = c(1,1,1,1)
int.targets = list(integer(0), 4, 10, 12, 13)
int.size = round(size/(length(targets) +1))
int.index = lapply(int.size, get.int.index, targets)
quad.density = 0.5
quad = t(true.am)
quad[which(quad == 1)] = 1 + rbinom(sum(quad), 1, quad.density)
print(sum(quad ==2))
# tmp = t(quad)
# tmp[which(tmp != 0)] = tmp[which(tmp != 0)] -1
#
# tmp.gr = graph.adjacency(tmp)
#
# for(e in E(g)){
#   if(E(g)[e] %in% E(tmp.gr)){
#     E(g)[e]$color = "red"
#   }else{
#       E(g)[e]$color = "black"
#   }
# }
qubic = quad
qubic[which(qubic == 2)] = 3
logistic = quad
logistic[which(logistic != 0)] = logistic[which(logistic != 0)]-1
set.seed(6)
l = runif(sum(logistic, 4,16))
k = runif(sum(logistic, 0.5, 4))
neg = rbinom(sum(logistic), 1, 0.5)
k[which(neg == 1)] = -k[which(neg == 1)]
sum(logistic)
set.seed(6)
lambda = 1/sdev # this results error terms with the same variatoin as with a normal distr
dat.list = lapply(size, FUN = get.lin.exp, mmat = mmat, lambda = lambda)
get.int.data = function(mmat, targets, tar.values, sdev, size){
data = get.lin.exp(mmat, lambda, size)
for( i in seq(length(targets))){
int = get.int.exp(mmat, targets[i], tar.values[i], lambda, size)
data = rbind(data, int)
}
return(data)
}
#
# get.int.index = function(size, targets){
#   int.target.index = (rep(c(1, targets), rep(size, length(targets)+1)))
#
# }
#
# targets = c(2,3)
# tar.values = c(1,1)
# int.targets = list(integer(0), 2,3)
#int.size =  round(size/(length(targets) + 1))
int.data = lapply(int.size, get.int.data, targets = targets, tar.values = tar.values, mmat = mmat, sdev = sdev)
quad.density = 0.5
quad = t(true.am)
quad[which(quad == 1)] = 1 + rbinom(sum(quad), 1, quad.density)
print(sum(quad ==2))
logistic = quad
logistic[which(logistic != 0)] = logistic[which(logistic != 0)]-1
set.seed(6)
l = runif(sum(logistic, 4,16))
k = runif(sum(logistic, 0.5, 4))
neg = rbinom(sum(logistic), 1, 0.5)
k[which(neg == 1)] = -k[which(neg == 1)]
source("../sid_logistic.R")
source('~/Documents/master_thesis_manuel/sid/sid_logistic.R')
int.size
int.size * 4
int.data
source('~/Documents/master_thesis_manuel/sid/sid_logistic.R')
source("../../test_utils.R")
source("../sid_samplesize.R")
set.seed(6)
library(bnlearn)
install.packages("bnlearn")
source("../../test_utils.R")
source("../sid_samplesize.R")
source("../../test_utils.R")
source("../sid_samplesize.R")
install.packages("pcalg")
source("../../test_utils.R")
source("../sid_samplesize.R")
version
install.packages("pcalg", dependencies = T)
source("../../test_utils.R")
source("../sid_samplesize.R")
iinstalled.packages("graph")
install.packages("graph")
source("../../test_utils.R")
source("../sid_samplesize.R")
source("https://bioconductor.org/biocLite.R")
biocLite("graph")
biocLite("RGB")
install.packages("pcalg")
biocLite("RGBL")
install.packages("RGBL")
install.packages("RBGL")
biocLite("RBGL")
install.packages("pcalg")
source("../../test_utils.R")
source("../sid_samplesize.R")
install.packages("SID")
source("../sid_samplesize.R")
sem = get.random.sem2(15, 0.15, c(0.2,3), c(0.1,1.2)) # large but sparse graph
mmat = sem[[1]]
sdev = sem[[2]]
true.am= t(sem[[1]])#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
# named X1, X2, ..., Xn
g = graph.adjacency(true.am)
plot(g)
source("../../test_utils.R")
source("../sid_samplesize.R")
set.seed(6)
sem = get.random.sem2(15, 0.15, c(0.2,3), c(0.1,1.2)) # large but sparse graph
mmat = sem[[1]]
sdev = sem[[2]]
true.am= t(sem[[1]])#mmat is contains outgoing edges, incomming ones are needed for sid
true.am[which(true.am != 0)] = 1
# add nodenames (needed for get.adjm.from.bn)
colnames(true.am) = rownames(true.am) = paste(rep("X", dim(true.am)[1]), seq(dim(true.am)[1]),sep = "")
# named X1, X2, ..., Xn
g = graph.adjacency(true.am)
plot(g)
source("../../test_utils.R")
size = seq(50,4000, 10)
targets = c(4,10,12,13)
tar.values = c(1,1,1,1)
int.targets = list(integer(0), 4, 10, 12, 13)
int.size = round(size/(length(targets) +1))
int.index = lapply(int.size, get.int.index, targets)
get.int.index = function(size, targets){
obs = length(targets) + 1
int.target.index = rep(1:obs, rep(size, obs))
}
size = seq(50,4000, 10)
targets = c(4,10,12,13)
tar.values = c(1,1,1,1)
int.targets = list(integer(0), 4, 10, 12, 13)
int.size = round(size/(length(targets) +1))
int.index = lapply(int.size, get.int.index, targets)
mmat
source("interactions.R")
read.table("mmat.txt")
mmat = as.matrix(read.table("mmat.txt"))
source("../../test_utils.R")
adjm = adjm.from.mmat(mmat)
plot(graphAM(adjm, edgemode = "directed"))
plot(graph.adjacency(adjm, edgemode = "directed"))
library(igraph)
plot(graph.adjacency(adjm, edgemode = "directed"))
plot(graph.adjacency(adjm, edgemode = "dirrected"))
plot(graph.adjacency(adjm, directed = T))
plot(graph.adjacency(adjm, mode = "directed"))
col = rep("black", ecount(stability.graph))
edge.nr = 1
for(i in 1:nrow(selected.stability.ma)){
for(j in 1:ncol(selected.stability.ma)){
if(undir.matrix[i,j] == 1){
col[edge.nr] = "red"
edge.nr = edge.nr + 1
}else if(selected.stability.ma[i,j] != 0){
edge.nr = edge.nr + 1
}
}
}
logistic = as.matrix(read.table("logistic.txt"))
plot(graph.adjacency(adjm, mode = "directed"))
col = rep("black", ecount(stability.graph))
edge.nr = 1
g = graph.adjacency(adjm, mode = "directed"))
g = graph.adjacency(adjm, mode = "directed")
logistic = as.matrix(read.table("logistic.txt"))
col = rep("black", ecount(g))
edge.nr = 1
for(i in 1:nrow(logistic)){
for(j in 1:ncol(logistic)){
if(logistic[i,j] == 1){
col[edge.nr] = "red"
edge.nr = edge.nr + 1
}else {
edge.nr = edge.nr + 1
}
}
}
plot.igraph(g, edge.color = col)
col
col = rep("black", ecount(g))
col
edge.nr = 1
for(i in 1:nrow(logistic)){
for(j in 1:ncol(logistic)){
if(logistic[i,j] == 1){
col[edge.nr] = "red"
edge.nr = edge.nr + 1
}else {
edge.nr = edge.nr + 1
}
}
}
plot.igraph(g, edge.color = col)
col
col = rep("black", ecount(g))
edge.nr = 1
for(i in 1:nrow(logistic)){
for(j in 1:ncol(logistic)){
if(logistic[i,j] == 1){
col[edge.nr] = "red"
edge.nr = edge.nr + 1
}else if(adjm[i,j] == 1){
edge.nr = edge.nr + 1
}
}
}
plot.igraph(g, edge.color = col)
logistic
col
E(g)
logistic = t(as.matrix(read.table("logistic.txt")))
g = graph.adjacency(adjm, mode = "directed")
col = rep("black", ecount(g))
edge.nr = 1
for(i in 1:nrow(logistic)){
for(j in 1:ncol(logistic)){
if(logistic[i,j] == 1){
col[edge.nr] = "red"
edge.nr = edge.nr + 1
}else if(adjm[i,j] == 1){
edge.nr = edge.nr + 1
}
}
}
plot.igraph(g, edge.color = col)
logistic
sum(logistic)
plot, edge.color = col)
plot(g, edge.color = col)
plot.igraph(g, edge.color = col)
plot.igraph(g, edge.color = col, cex =
)
plot.igraph(g, edge.color = col, cex = 0.5)
plot.igraph(g, edge.color = col, lable.font = 1)
plot.igraph(g, edge.color = col, lable.cex = 0.5)
plot.igraph(g, edge.color = col, virtex.size = 0.5)
plot.igraph(g, edge.color = col, vertex.size = 0.5)
plot.igraph(g, edge.color = col, vertex.size = 2)
plot.igraph(g, edge.color = col, vertex.size = 1)
plot.igraph(g, edge.color = col, vertex.size = 1000)
plot.igraph(g, edge.color = col, vertex.size = 100)
plot.igraph(g, edge.color = col, vertex.size = 10)
plot.igraph(g, edge.color = col, vertex.size = 30)
plot.igraph(g, edge.color = col, vertex.size = 20)
pdf("final_graph.pdf")
plot.igraph(g, edge.color = col)
dev.off()
